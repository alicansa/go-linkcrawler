// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alicansa/go-linkcrawler/dal (interfaces: LinkRepository,CrawlJobRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dal "github.com/alicansa/go-linkcrawler/dal"
	gomock "github.com/golang/mock/gomock"
)

// MockLinkRepository is a mock of LinkRepository interface.
type MockLinkRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLinkRepositoryMockRecorder
}

// MockLinkRepositoryMockRecorder is the mock recorder for MockLinkRepository.
type MockLinkRepositoryMockRecorder struct {
	mock *MockLinkRepository
}

// NewMockLinkRepository creates a new mock instance.
func NewMockLinkRepository(ctrl *gomock.Controller) *MockLinkRepository {
	mock := &MockLinkRepository{ctrl: ctrl}
	mock.recorder = &MockLinkRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkRepository) EXPECT() *MockLinkRepositoryMockRecorder {
	return m.recorder
}

// AddLink mocks base method.
func (m *MockLinkRepository) AddLink(arg0 string, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLink", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLink indicates an expected call of AddLink.
func (mr *MockLinkRepositoryMockRecorder) AddLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLink", reflect.TypeOf((*MockLinkRepository)(nil).AddLink), arg0, arg1)
}

// GetLinks mocks base method.
func (m *MockLinkRepository) GetLinks(arg0 int) ([]dal.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinks", arg0)
	ret0, _ := ret[0].([]dal.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinks indicates an expected call of GetLinks.
func (mr *MockLinkRepositoryMockRecorder) GetLinks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinks", reflect.TypeOf((*MockLinkRepository)(nil).GetLinks), arg0)
}

// MockCrawlJobRepository is a mock of CrawlJobRepository interface.
type MockCrawlJobRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCrawlJobRepositoryMockRecorder
}

// MockCrawlJobRepositoryMockRecorder is the mock recorder for MockCrawlJobRepository.
type MockCrawlJobRepositoryMockRecorder struct {
	mock *MockCrawlJobRepository
}

// NewMockCrawlJobRepository creates a new mock instance.
func NewMockCrawlJobRepository(ctrl *gomock.Controller) *MockCrawlJobRepository {
	mock := &MockCrawlJobRepository{ctrl: ctrl}
	mock.recorder = &MockCrawlJobRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrawlJobRepository) EXPECT() *MockCrawlJobRepositoryMockRecorder {
	return m.recorder
}

// AddCrawlJob mocks base method.
func (m *MockCrawlJobRepository) AddCrawlJob(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCrawlJob", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCrawlJob indicates an expected call of AddCrawlJob.
func (mr *MockCrawlJobRepositoryMockRecorder) AddCrawlJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCrawlJob", reflect.TypeOf((*MockCrawlJobRepository)(nil).AddCrawlJob), arg0)
}

// GetCrawlJob mocks base method.
func (m *MockCrawlJobRepository) GetCrawlJob(arg0 int) (dal.CrawlJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrawlJob", arg0)
	ret0, _ := ret[0].(dal.CrawlJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrawlJob indicates an expected call of GetCrawlJob.
func (mr *MockCrawlJobRepositoryMockRecorder) GetCrawlJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlJob", reflect.TypeOf((*MockCrawlJobRepository)(nil).GetCrawlJob), arg0)
}

// GetCrawlJobForUrl mocks base method.
func (m *MockCrawlJobRepository) GetCrawlJobForUrl(arg0 string) (dal.CrawlJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrawlJobForUrl", arg0)
	ret0, _ := ret[0].(dal.CrawlJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrawlJobForUrl indicates an expected call of GetCrawlJobForUrl.
func (mr *MockCrawlJobRepositoryMockRecorder) GetCrawlJobForUrl(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlJobForUrl", reflect.TypeOf((*MockCrawlJobRepository)(nil).GetCrawlJobForUrl), arg0)
}

// GetCrawlJobs mocks base method.
func (m *MockCrawlJobRepository) GetCrawlJobs() ([]dal.CrawlJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCrawlJobs")
	ret0, _ := ret[0].([]dal.CrawlJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCrawlJobs indicates an expected call of GetCrawlJobs.
func (mr *MockCrawlJobRepositoryMockRecorder) GetCrawlJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCrawlJobs", reflect.TypeOf((*MockCrawlJobRepository)(nil).GetCrawlJobs))
}

// UpdateCrawlJobStatus mocks base method.
func (m *MockCrawlJobRepository) UpdateCrawlJobStatus(arg0 int, arg1 dal.CrawlJobStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCrawlJobStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCrawlJobStatus indicates an expected call of UpdateCrawlJobStatus.
func (mr *MockCrawlJobRepositoryMockRecorder) UpdateCrawlJobStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCrawlJobStatus", reflect.TypeOf((*MockCrawlJobRepository)(nil).UpdateCrawlJobStatus), arg0, arg1)
}
